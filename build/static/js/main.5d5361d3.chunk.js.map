{"version":3,"sources":["components/Navbar.js","components/NavMenu.js","theme.js","actions/actionTypes.js","App.js","actions/CommonActions.js","serviceWorker.js","reducers/initialState.js","CombinedReducers.js","reducers/commonReducer.js","index.js"],"names":["withStyles","theme","root","flexGrow","grow","menuButton","marginLeft","marginRight","navbar","mixins","toolbar","_ref","classes","toggleDrawer","react_default","a","createElement","className","index_es","position","color","aria-label","onClick","Menu_default","variant","list","width","backgroundColor","palette","background","paper","navItems","navOpen","component","button","primary","console","log","anchor","open","onClose","tabIndex","role","onKeyDown","createMuiTheme","blue","secondary","pink","error","red","TOGGLE_NAV_OPEN","App","this","props","styles","components_Navbar","components_NavMenu","style","marginTop","top","Component","connect","state","common","dispatch","type","actionTypes","Boolean","window","location","hostname","match","initialState","app","reducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","getState","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d5361d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AppBar, Toolbar, Typography, IconButton } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    grow: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginLeft: -12,\r\n        marginRight: 20\r\n    },\r\n    navbar: theme.mixins.toolbar,\r\n});\r\n\r\nconst Navbar = ({\r\n    classes,\r\n    toggleDrawer\r\n}) => {\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"fixed\" color=\"primary\">\r\n                <Toolbar>\r\n                    <IconButton \r\n                        className={classes.menuButton} \r\n                        color=\"inherit\" \r\n                        aria-label=\"Menu\" \r\n                        onClick={toggleDrawer}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                        This Here App\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {/* below used to create spacing below app bar*/}\r\n            <div className={classes.navbar}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nNavbar.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    toggleDrawer: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(Navbar);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Drawer, List, ListItem, ListItemText, withStyles } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    list: {\r\n        width: 250,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    navItems: {\r\n\r\n    }\r\n});\r\n\r\nconst NavMenu = ({\r\n    classes,\r\n    navOpen,\r\n    toggleDrawer\r\n}) => {\r\n\r\n    const navItems = (\r\n        <div className={classes.list}>\r\n            <List component=\"nav\">\r\n                <ListItem button>\r\n                    <ListItemText primary=\"Test 1\" />\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemText primary=\"Test 2\" />\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemText primary=\"Test 3\" />\r\n                </ListItem>\r\n            </List>\r\n        </div>\r\n    );\r\n\r\n    console.log(navOpen);\r\n\r\n    return (\r\n        <div>\r\n            <Drawer anchor=\"left\" open={navOpen} onClose={toggleDrawer}>\r\n                <div\r\n                    tabIndex={0}\r\n                    role=\"button\"\r\n                    onClick={toggleDrawer}\r\n                    onKeyDown={toggleDrawer}\r\n                >\r\n                    {navItems}\r\n                </div>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}\r\n\r\nNavMenu.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    navOpen: PropTypes.bool.isRequired,\r\n    toggleDrawer: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(NavMenu);","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport pink from '@material-ui/core/colors/pink';\r\nimport red from '@material-ui/core/colors/red';\r\n\r\nexport default createMuiTheme({\r\n    palette: {\r\n        primary: blue,\r\n        secondary: pink,\r\n        error: red\r\n    },\r\n})","export const TOGGLE_NAV_OPEN = \"TOGGLE_NAV_OPEN\";","import React, { Component } from 'react';\nimport './App.css';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport Navbar from './components/Navbar';\nimport NavMenu from './components/NavMenu';\nimport theme from './theme';\nimport { Paper, Typography } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport * as commonActions from './actions/CommonActions';\n\nclass App extends Component {\n    render() {\n    console.log(this.props.navOpen)\n    return (\n            <MuiThemeProvider theme={theme}>\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <Navbar toggleDrawer={this.props.toggleDrawer}/>\n                        <NavMenu navOpen={this.props.navOpen} toggleDrawer={this.props.toggleDrawer} />\n                    </header>\n                    <Paper style={{ marginTop: 100, marginLeft: 50, marginRight: 50, top: '50%' }}>\n                        <Typography variant=\"h1\" style={{ color: \"black\" }}>Placeholder</Typography>\n                    </Paper>\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        navOpen: state.common.navOpen,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        toggleDrawer: () => { dispatch(commonActions.toggleNavOpen()) }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as actionTypes from './actionTypes';\r\n\r\nexport function toggleNavOpen(){\r\n    return { type: actionTypes.TOGGLE_NAV_OPEN };\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    app: {\r\n        navOpen: false\r\n    }\r\n}\r\n\r\nexport default initialState;","import { combineReducers } from 'redux';\r\nimport common from './reducers/commonReducer';\r\n\r\nconst reducer = combineReducers({\r\n    common\r\n});\r\n\r\nexport default reducer;","import initialState from './initialState';\r\n\r\nexport default function common(state = initialState.app, action){\r\n    console.log(action.type);\r\n    switch(action.type){\r\n        case 'TOGGLE_NAV_OPEN': {\r\n            console.log(state.navOpen);\r\n            return Object.assign({}, state, {\r\n                navOpen: !state.navOpen\r\n            });\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './CombinedReducers';\n\nconst store = createStore(reducer);\n\nconsole.log(store.getState())\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}